{\rtf1\ansi\ansicpg1252\deff0\nouicompat\deflang1033{\fonttbl{\f0\fswiss\fcharset0 Calibri;}{\f1\froman\fprq2\fcharset0 Times New Roman;}{\f2\fnil\fcharset0 Calibri;}}
{\*\generator Riched20 10.0.22621}\viewkind4\uc1 
\pard 
{\pntext\f0 1)\tab}{\*\pn\pnlvlbody\pnf0\pnindent0\pnstart1\pndec{\pntxta)}}
\widctlpar\f0\fs20\lang16393 GREEDY KNAPSACK\par

\pard\widctlpar\par
class Item:\par
    def __init__(self, value, weight):\par
        self.value = value\par
        self.weight = weight\par
        self.ratio = value / weight\par
\par
def fractional_knapsack(items, capacity):\par
    # Step 1: Sort items by value-to-weight ratio in descending order\par
    items.sort(key=lambda item: item.ratio, reverse=True)\par
\par
    total_value = 0.0  # Total value in the knapsack\par
    current_weight = 0  # Current weight in the knapsack\par
\par
    # Step 2: Loop through sorted items and add to knapsack\par
    for item in items:\par
        if current_weight + item.weight <= capacity:\par
            # If item fits fully, add it\par
            current_weight += item.weight\par
            total_value += item.value\par
        else:\par
            # If item does not fit fully, take a fraction of it\par
            remain_weight = capacity - current_weight\par
            fraction = remain_weight / item.weight\par
            total_value += item.value * fraction\par
            break  # Knapsack is now full\par
\par
    return total_value\par
\par
# Example usage\par
items = [\par
    Item(60, 10),  # value = 60, weight = 10\par
    Item(100, 20), # value = 100, weight = 20\par
    Item(120, 30)  # value = 120, weight = 30\par
]\par
capacity = 50\par
\par
max_value = fractional_knapsack(items, capacity)\par
print("Maximum value in knapsack =", max_value)\par
\par
\par

\pard\widctlpar\f1\lang1033 2) \f0\lang16393 QUICK SORT\par

\pard\widctlpar      \par
# Quick Sort implementation using Divide and Conquer\par
\par
def quick_sort(arr):\par
    # Base case: if the array is empty or has only one element, it's already sorted\par
    if len(arr) <= 1:\par
        return arr\par
    else:\par
        # Step 1: Choose a pivot\par
        pivot = arr[0]\par
        \par
        # Step 2: Partition the array into three parts:\par
        # Elements less than the pivot, elements equal to the pivot, and elements greater than the pivot\par
        less_than_pivot = [x for x in arr[1:] if x < pivot]\par
        equal_to_pivot = [x for x in arr if x == pivot]\par
        greater_than_pivot = [x for x in arr[1:] if x > pivot]\par
        \par
        # Step 3: Recursively sort the partitions and combine them\par
        return quick_sort(less_than_pivot) + equal_to_pivot + quick_sort(greater_than_pivot)\par
\par
# Testing the function\par
arr = [34, 7, 23, 32, 5, 62]\par
sorted_arr = quick_sort(arr)\par
print("Sorted array:", sorted_arr)\par
\par
\par

\pard\widctlpar\f1\lang1033 3) \f0\lang16393 MERGE SORT\par

\pard\widctlpar   \par
# Merge Sort implementation using Divide and Conquer\par
\par
def merge_sort(arr):\par
    # Base case: If the array has one or zero elements, it's already sorted\par
    if len(arr) <= 1:\par
        return arr\par
\par
    # Step 1: Split the array into two halves\par
    mid = len(arr) // 2\par
    left_half = arr[:mid]\par
    right_half = arr[mid:]\par
\par
    # Step 2: Recursively sort each half\par
    left_sorted = merge_sort(left_half)\par
    right_sorted = merge_sort(right_half)\par
\par
    # Step 3: Merge the sorted halves\par
    return merge(left_sorted, right_sorted)\par
\par
def merge(left, right):\par
    # Merging two sorted arrays\par
    sorted_arr = []\par
    i = j = 0\par
\par
    # Step 4: Compare elements from each half and merge them in sorted order\par
    while i < len(left) and j < len(right):\par
        if left[i] < right[j]:\par
            sorted_arr.append(left[i])\par
            i += 1\par
        else:\par
            sorted_arr.append(right[j])\par
            j += 1\par
\par
    # Step 5: Append remaining elements, if any\par
    sorted_arr.extend(left[i:])\par
    sorted_arr.extend(right[j:])\par
\par
    return sorted_arr\par
\par
# Testing the function\par
arr = [34, 7, 23, 32, 5, 62]\par
sorted_arr = merge_sort(arr)\par
print("Sorted array:", sorted_arr)\par

\pard\widctlpar\f1\lang1033 4) \f0\lang16393 MIN HEAP MAX HEAP\par
\f1\lang1033 5) \f0\lang16393  HEAP SORT \par

\pard\widctlpar   \par
def heapify(arr, n, i):\par
    largest = i\par
    left = 2 * i + 1\par
    right = 2 * i + 2\par
\par
    if left < n and arr[left] > arr[largest]:\par
        largest = left\par
\par
    if right < n and arr[right] > arr[largest]:\par
        largest = right\par
\par
    if largest != i:\par
        arr[i], arr[largest] = arr[largest], arr[i]\par
        heapify(arr, n, largest)\par
\par
def heap_sort(arr):\par
    n = len(arr)\par
\par
    for i in range(n // 2 - 1, -1, -1):\par
        heapify(arr, n, i)\par
\par
    for i in range(n - 1, 0, -1):\par
        arr[i], arr[0] = arr[0], arr[i]\par
        heapify(arr, i, 0)\par
\par
arr = [12, 11, 13, 5, 6, 7]\par
print("Original array:", arr)\par
\par
heap_sort(arr)\par
print("Sorted array:", arr) \par
\par
\par

\pard\widctlpar\f1\lang1033 6) \f0\lang16393 HASHING\par

\pard\widctlpar\par
class HashTable:\par
    def __init__(self, size):\par
        self.size = size\par
        self.table = [[] for _ in range(size)]\par
\par
    def hash_function(self, key):\par
        return key % self.size\par
\par
    def insert_separate_chaining(self, key):\par
        index = self.hash_function(key)\par
        self.table[index].append(key)\par
\par
    def insert_linear_probing(self, key):\par
        index = self.hash_function(key)\par
        start_index = index\par
        while self.table[index] != []:\par
            index = (index + 1) % self.size\par
            if index == start_index:\par
                print("Hash table is full!")\par
                return\par
        self.table[index] = key\par
\par
    def insert_quadratic_probing(self, key):\par
        index = self.hash_function(key)\par
        i = 1\par
        start_index = index\par
        while self.table[index] != []:\par
            index = (start_index + i**2) % self.size\par
            i += 1\par
            if i == self.size:\par
                print("Hash table is full!")\par
                return\par
        self.table[index] = key\par
\par
    def double_hash_function(self, key):\par
        return 7 - (key % 7)\par
\par
    def insert_double_hashing(self, key):\par
        index = self.hash_function(key)\par
        step_size = self.double_hash_function(key)\par
        start_index = index\par
        while self.table[index] != []:\par
            index = (index + step_size) % self.size\par
            if index == start_index:\par
                print("Hash table is full!")\par
                return\par
        self.table[index] = key\par
\par
    def display(self):\par
        for i in range(self.size):\par
            print(f"Index \{i\}: \{self.table[i]\}")\par
\par
def main():\par
    size = int(input("Enter the size of the hash table: "))\par
    hash_table = HashTable(size)\par
\par
    print("\\nChoose the collision resolution technique:")\par
    print("1. Separate Chaining")\par
    print("2. Linear Probing")\par
    print("3. Quadratic Probing")\par
    print("4. Double Hashing")\par
    \par
    choice = int(input("Enter your choice (1/2/3/4): "))\par
    \par
    if choice not in [1, 2, 3, 4]:\par
        print("Invalid choice!")\par
        return\par
\par
    while True:\par
        value = int(input("\\nEnter a value to insert (or -1 to stop): "))\par
        if value == -1:\par
            break\par
        if choice == 1:\par
            hash_table.insert_separate_chaining(value)\par
        elif choice == 2:\par
            hash_table.insert_linear_probing(value)\par
        elif choice == 3:\par
            hash_table.insert_quadratic_probing(value)\par
        elif choice == 4:\par
            hash_table.insert_double_hashing(value)\par
\par
    print("\\nHash Table:")\par
    hash_table.display()\par
\par
if __name__ == "__main__":\par
    main()\par

\pard\sa200\sl276\slmult1\f2\fs22\lang9\par
}
 